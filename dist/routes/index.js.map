{"version":3,"sources":["../../routes/index.js"],"names":["express","require","router","Router","_","request","get","req","res","next","render","title","query","process","env","VERIFY_TOKEN","console","log","status","send","error","sendStatus","post","data","body","object","entry","forEach","pageID","id","timeOfEvent","time","messaging","event","message","receivedMessage","senderID","sender","recipientID","recipient","timeOfMessage","timestamp","JSON","stringify","messageID","messageText","text","messageAttachment","attachments","sendGenericMessage","sendTextMessage","messageData","callSendAPI","uri","qs","access_token","PAGE_ACCESS_TOKEN","method","json","response","statusCode","recipientId","recipient_id","messageId","message_id","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["let express = require('express');\nlet router = express.Router();\nlet _ = require('lodash')\nlet request = require('request')\n/* GET home page. */\nrouter.get('/', function (req, res, next) {\n    res.render('index', {title: 'Express'});\n});\n\nrouter.get('/webhook', function (req, res) {\n    if(req.query['hub.mode'] === 'subscribe' &&\n        req.query['hub.verify_token'] === process.env.VERIFY_TOKEN) {\n        console.log(\"Validating webhook\");\n        res.status(200).send(req.query['hub.challenge']);\n    } else {\n        console.error(\"Failed validation. Make sure the validation tokens match.\");\n        res.sendStatus(403);\n    }\n});\n\nrouter.post('/webhook', (req, res, next) => {\n    \n    let data = req.body;\n    \n    if(data.object === 'page') {\n        \n        data.entry.forEach((entry) => {\n            \n            let pageID = entry.id;\n            let timeOfEvent = entry.time;\n            \n            entry.messaging.forEach((event) => {\n                \n                if(event.message) {\n                    receivedMessage(event)\n                } else {\n                    console.log(\"Webhook received unkown event: %s\", event)\n                }\n                \n            })\n            \n        });\n        \n    }\n    \n    res.sendStatus(200);\n    \n})\n\nfunction receivedMessage(event) {\n    console.log('Message data: %s', event.data)\n    \n    let senderID = event.sender.id;\n    let recipientID = event.recipient.id;\n    let timeOfMessage = event.timestamp;\n    let message = event.message;\n    console.log(\"Received message for user %d and page %d at %d with message:\", senderID, recipientID, timeOfMessage);\n    console.log(JSON.stringify(message));\n    \n    let messageID = message.id;\n    let messageText = message.text;\n    let messageAttachment = message.attachments;\n    if(messageText) {\n        \n        switch (messageText) {\n            case 'generic':\n                sendGenericMessage(senderID);\n                break;\n            default:\n                sendTextMessage(senderID, messageText);\n                break;\n        }\n        \n    }\n    \n}\n\n\nfunction sendGenericMessage(senderID) {\n    \n}\n\nfunction sendTextMessage(recipientID, messageText) {\n    let messageData = {\n        recipient: {\n            id: recipientID,\n        },\n        message: {\n            text: messageText\n        }\n    };\n    callSendAPI(messageData);\n}\n\n\nfunction callSendAPI(messageData) {\n    \n    request({\n        uri: 'https://graph.facebook.com/v2.6/me/messages',\n        qs: {access_token: process.env.PAGE_ACCESS_TOKEN},\n        method: 'POST',\n        json: messageData\n    }, (error, response, body) => {\n        if(!error && response.statusCode === 200) {\n            let recipientId = body.recipient_id;\n            let messageId = body.message_id;\n            console.log(\"Successfully sent generic message with id %s to recipient %s\", messageId, recipientId);\n            \n        } else {\n            console.error('Unable to send message.')\n            console.error(response);\n            console.error(error);\n        }\n    })\n    \n}\n\nmodule.exports = router;\n"]}